package com.gmail.cfretz244;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Stack;

import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

public final class Spleefer extends JavaPlugin implements Listener {
	
	HashSet<String> registeredPlayers, registeredSpectators, listenTo;
	Location[][] regions;
	SpleefListener listener;
	Executor utility;
	String world;
	boolean settingUp, definingFightingRoom, definingFloor, definingSpawn, definingKill, definingSpectation, finishedDefinition, inRound;
	static final int KILL = 0, FLOOR = 1, FIGHTING = 2, SPECTATING = 3, SPAWNING = 4;
	
	@Override
	public void onEnable() {
		regions = new Location[5][];
		File check = new File("plugins/spleefer.yml");
		if(check.exists()) {
			
		}
		for(int i = 0; i < 5; i++) {
			regions[i] = new Location[2];
		}
		registeredPlayers = new HashSet<String>();
		registeredSpectators = new HashSet<String>();
		listenTo = new HashSet<String>();
		listener = new SpleefListener(regions, registeredPlayers, registeredSpectators, listenTo, utility, this);
		utility = new Executor(regions, registeredPlayers, registeredSpectators, listenTo, this);
	}
	
	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
		if(sender instanceof Player) {
			Player player = (Player) sender;
			String name = player.getName();
			if(cmd.getName().equals("spleef")) {
				if(args[0].equals("setup")) {
					if(!settingUp) {
						listenTo.add(name);
						settingUp = true;
						definingFightingRoom = true;
						listener.settingUp = true;
						utility.giveSpleefWand(player);
						player.sendMessage(ChatColor.YELLOW + "[Spleefer] Please define the fighting room. Use \"/spleef done\" to indicate you've chosen");
						getServer().getPluginManager().registerEvents(listener, this);
						listener.shouldListenForBlockInteraction = true;
						listener.definingFightingRoom = true;
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] You're already setting up the spleef arena.");
					}
					
				} else if(args[0].equals("done")) {
					if(settingUp) {
						if(definingFightingRoom) {
							world = regions[FIGHTING][0].getWorld().getName();
							definingFightingRoom = false;
							listener.definingFightingRoom = false;
							player.sendMessage(ChatColor.YELLOW + "[Spleefer] Please define the spleef arena floor. Use\"/spleef done\" to indicate you've chosen.");
							definingFloor = true;
							listener.definingFloor = true;
						} else if(definingFloor) {
							definingFloor = false;
							listener.definingFloor = false;
							player.sendMessage(ChatColor.YELLOW + "[Spleefer] Please define the spleef spawning region. Use \"/spleef done\" to indicate you've chosen.");
							definingSpawn = true;
							listener.definingSpawn = true;
						} else if(definingSpawn) {
							definingSpawn = false;
							listener.definingSpawn = false;
							player.sendMessage(ChatColor.YELLOW + "[Spleefer] Please define the spleef kill region. Use \"/spleef done\" to indicate you've chosen.");
							definingKill = true;
							listener.definingKill = true;
						} else if(definingKill) {
							definingKill = false;
							listener.definingKill = false;
							player.sendMessage(ChatColor.YELLOW + "[Spleefer] Please define the spleef spectators room. Use \"/spleef done\" to indicate you've chosen.");
							definingSpectation = true;
							listener.definingSpectation = true;
						} else if(definingSpectation) {
							definingSpectation = false;
							listener.definingSpectation = false;
							player.sendMessage(ChatColor.GREEN + "[Spleefer] Finished Definitions. If you're happy with your choices, use \"/spleef save\" to finalize it. Otherwise use \"/spleef discard\".");
							finishedDefinition = true;
							listener.finishedDefinition = true;
							listenTo.remove(name);
						} else {
							player.sendMessage(ChatColor.RED + "[Spleefer] Really not sure how you got here. This message was added more for completeness than anything else. Either way, something is wrong. I guess try resetting the server?");
						}
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] But you weren't doing anything.");
					}
				} else if(args[0].equals("save")) {
					if(settingUp) {
						if(finishedDefinition) {
							finishedDefinition = false;
							try {
								File arenas = new File("plugins/spleefer.yml");
								arenas.createNewFile();
								FileWriter writer = new FileWriter(arenas, true);
								PrintWriter pw = new PrintWriter(writer);
								String arenaString = new String(world + "|");
								for(int i = 0; i < 5; i++) {
									for(int k = 0; k < 2; k++) {
										arenaString += regions[i][k].getX() + "|";
										arenaString += regions[i][k].getY() + "|";
										arenaString += regions[i][k].getZ() + "|";
									}
								}
								arenaString = arenaString.substring(0, arenaString.length() - 1);
								pw.print(arenaString);
								pw.close();
								player.sendMessage(ChatColor.GREEN + "[Spleefer] Arena Saved");
							} catch(IOException e) {
								player.sendMessage(ChatColor.RED + "[Spleefer] Sorry, the arena could not be saved. Perhaps try again later.");
							}
						} else {
							player.sendMessage(ChatColor.RED + "[Spleefer] You need to define an arena before you can save.");
						}
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] There's nothing to save.");
					}
				} else if(args[0].equals("discard")) {
					if(settingUp) {
						for(int i = 0; i < 2; i++) {
							regions[KILL][i] = null;
							regions[FLOOR][i] = null;
							regions[FIGHTING][i] = null;
							regions[SPECTATING][i] = null;
							regions[SPAWNING][i] = null;
						}
						settingUp = false;
						player.sendMessage(ChatColor.GREEN + "[Spleefer] Done. Better luck next time.");
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] There's nothing to discard.");
					}
				} else if(args[0].equals("begin")) {
					if(utility.validateSpleefState()) {
						if(args.length > 2) {
							if(utility.validatePlayerNames(player, args, getServer())) {
								for(int i = 1; i < args.length; i++) {
									registeredPlayers.add(args[i]);
									listenTo.add(args[i]);
								}
								inRound = true;
								beginRound();
							}
						} else {
							player.sendMessage(ChatColor.RED + "[Spleefer] Sorry, you need to list at least 2 players to begin a round.");
						}
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] Sorry, you haven't defined the spleef arena yet.");
					}
				} else if(args[0].equals("spectate")) {
					if(inRound) {
						registeredSpectators.add(name);
						listenTo.add(name);
						utility.moveSpectator(getServer(), player);
						player.sendMessage(ChatColor.GREEN + "[Spleefer] Enjoy the show!");
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] Sorry, there has to be a round running before you can spectate.");
					}
				} else if(args[0].equals("leave")) {
					if(inRound) {
						if(registeredPlayers.contains(name) || registeredSpectators.contains(name)) {
							utility.removePlayer(getServer(), name);
						} else {
							player.sendMessage(ChatColor.RED + "[Spleefer] You can't leave as you aren't either playing or spectating.");
						}
					} else {
						player.sendMessage(ChatColor.RED + "[Spleefer] There isn't a round running currently.");
					}
				} else if(args[0].equals("clear")) {
					listenTo.clear();
					registeredPlayers.clear();
					registeredSpectators.clear();
				}
			}
		} else {
			sender.sendMessage(ChatColor.RED + "[Spleefer] Sender must be a player");
		}
		return false;
	}
	
	public void beginRound() {
		utility.movePlayersToSpawn(getServer());
		utility.broadcastToRegisteredPlayers(getServer(), ChatColor.YELLOW + "[Spleefer] The round will commence once all participants have left the spawn area.");
		listener.shouldListenForMovement = true;
		listener.waitingToCommence = true;
	}
	
	public void runRound() {
		listener.waitingToCommence = false;
	}
	
}